<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zhishun.zaotoutiao.dal.mapper.UserMoneyRecordMapper" >
  <resultMap id="BaseResultMap" type="com.zhishun.zaotoutiao.core.model.vo.UserMoneyRecordVO" >
      <id column="id" property="id" jdbcType="BIGINT" />
      <result column="userId" property="userId" jdbcType="BIGINT" />
      <result column="type" property="type" jdbcType="TINYINT" />
      <result column="money" property="money" jdbcType="DECIMAL" />
      <result column="source" property="source" jdbcType="TINYINT" />
      <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
      <result column="apprenticeId" property="apprenticeId" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, userId, type, money, source, create_date, apprenticeId
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from user_money_record
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from user_money_record
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.zhishun.zaotoutiao.core.model.entity.UserMoneyRecord" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into user_money_record (id, userId, type, 
      money, source, create_date, 
      apprenticeId)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{type,jdbcType=TINYINT},
      #{money,jdbcType=DECIMAL}, #{source,jdbcType=TINYINT}, #{createDate,jdbcType=TIMESTAMP}, 
      #{apprenticeId,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.zhishun.zaotoutiao.core.model.entity.UserMoneyRecord" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into user_money_record
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        userId,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="money != null" >
        money,
      </if>
      <if test="source != null" >
        source,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="apprenticeId != null" >
        apprenticeId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="type != null" >
        #{type,jdbcType=TINYINT},
      </if>
      <if test="money != null" >
        #{money,jdbcType=DECIMAL},
      </if>
      <if test="source != null" >
        #{source,jdbcType=TINYINT},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="apprenticeId != null" >
        #{apprenticeId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zhishun.zaotoutiao.core.model.entity.UserMoneyRecord" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user_money_record
    <set >
      <if test="userId != null" >
        userId = #{userId,jdbcType=BIGINT},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="money != null" >
        money = #{money,jdbcType=DECIMAL},
      </if>
      <if test="source != null" >
        source = #{source,jdbcType=TINYINT},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="apprenticeId != null" >
        apprenticeId = #{apprenticeId,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zhishun.zaotoutiao.core.model.entity.UserMoneyRecord" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user_money_record
    set userId = #{userId,jdbcType=BIGINT},
      type = #{type,jdbcType=TINYINT},
      money = #{money,jdbcType=DECIMAL},
      source = #{source,jdbcType=TINYINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      apprenticeId = #{apprenticeId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="getUserMoneyRecord" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select u.id, u.userId, u.type, u.source, u.create_date, u.apprenticeId, s.explanation,s.details
    from user_money_record as u
    LEFT JOIN static_gold_money_source as s ON u.source = s.source
    WHERE s.type = 'money' and u.userId = #{userId}
    and TO_DAYS( NOW( ) ) - TO_DAYS(u.create_date) &lt;= 3  order by u.create_date desc
  </select>

  <select id="getMoneyYesterday" parameterType="java.lang.Long" resultType="decimal">
    SELECT SUM(money) as moneyCount FROM user_money_record WHERE userId = #{userId} AND type = 1
    AND DATEDIFF(create_date,NOW())=-1 GROUP by userId
  </select>

  <select id="getMoneyAll" parameterType="java.lang.Long" resultType="decimal">
    SELECT SUM(money) as moneyCount FROM user_money_record WHERE userId = #{userId}
    AND type = 1 GROUP by userId
  </select>

  <select id="allRankings" resultType="com.zhishun.zaotoutiao.core.model.vo.AllRankingVO">
    SELECT user_money_record.userId, sum(user_money_record.money) as sumMoney
    FROM user_money_record
    WHERE user_money_record.type = 1 GROUP BY user_money_record.userId
    ORDER BY sum(user_money_record.money) DESC LIMIT 0,100
  </select>

  <select id="getNewUserMoney" parameterType="java.lang.Long" resultType="int">
    SELECT count(0) from user_money_record
    WHERE userId = #{userId} AND source = 0
  </select>

  <select id="listMoneyCount" parameterType="map" resultMap="BaseResultMap">
    <if test='type == "today"'>
      select DATE_FORMAT(create_date,'%Y-%m-%d:%H') times, sum(money) as sumMoney FROM user_money_record
      WHERE DateDiff(now(),create_date)=0
      <if test="source != null">
        and source = #{source}
      </if>
      <if test="isNewOrOld != null">
        <if test = 'isNewOrOld == "oldVisitors"'>
          and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) &lt; 1
        </if>
        <if test='isNewOrOld == "newVisitors"'>
          and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) = 1
        </if>
      </if>
      <if test="channelId != null">
        and a.channel_id = #{channelId}
      </if>
      group by times
    </if>
    <if test='type == "yesterday"'>
      select DATE_FORMAT(create_date,'%Y-%m-%d:%H') times, sum(money) as sumMoney FROM user_money_record
      WHERE DateDiff(now(),create_date) = 1
      <if test="source != null">
        and source = #{source}
      </if>
      <if test="isNewOrOld != null">
        <if test = 'isNewOrOld == "oldVisitors"'>
          and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) &lt; 1
        </if>
        <if test='isNewOrOld == "newVisitors"'>
          and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) = 1
        </if>
      </if>
      <if test="channelId != null">
        and channel_id = #{channelId}
      </if>
      group by times
    </if>
    <if test='type == "sevenDays"'>
      select DATE_FORMAT(create_date,'%Y-%m-%d') times, sum(money) as sumMoney FROM user_money_record
      WHERE DateDiff(now(),create_date) &lt;=7
      <if test="source != null">
        and source = #{source}
      </if>
      <if test="isNewOrOld != null">
        <if test = 'isNewOrOld == "oldVisitors"'>
          and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) &lt; 1
        </if>
        <if test='isNewOrOld == "newVisitors"'>
          and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) = 1
        </if>
      </if>
      <if test="channelId != null">
        and channel_id = #{channelId}
      </if>
      group by times
    </if>
    <if test='type == "thirtyDays"'>
      select DATE_FORMAT(create_date,'%Y-%m-%d') times, sum(money) as sumMoney FROM user_money_record
      WHERE DateDiff(now(),create_date) &lt;=30
      <if test="source != null">
        and source = #{source}
      </if>
      <if test="isNewOrOld != null">
        <if test = 'isNewOrOld == "oldVisitors"'>
          and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) &lt; 1
        </if>
        <if test='isNewOrOld == "newVisitors"'>
          and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) = 1
        </if>
      </if>
      <if test="channelId != null">
        and channel_id = #{channelId}
      </if>
      group by times
    </if>
    <if test='type == "weeks"'>
      select DATE_FORMAT(create_date,'%Y-%u') times, sum(money) as sumMoney FROM user_money_record
      <where>
        <if test="source != null">
          source = #{source}
        </if>
        <if test="isNewOrOld != null">
          <if test = 'isNewOrOld == "oldVisitors"'>
            and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) &lt; 1
          </if>
          <if test='isNewOrOld == "newVisitors"'>
            and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) = 1
          </if>
        </if>
        <if test="channelId != null">
          and channel_id = #{channelId}
        </if>
        <if test="startDate != null">
          and create_date &gt;= #{startDate}
        </if>
        <if test="endDate != null">
          and create_date &lt;= #{endDate}
        </if>
      </where>
      group by times;
    </if>
    <if test='type == "months"'>
      select DATE_FORMAT(create_date,'%Y-%m') times, sum(money) as sumMoney FROM user_money_record
      <where>
        <if test="source != null">
          source = #{source}
        </if>
        <if test="isNewOrOld != null">
          <if test = 'isNewOrOld == "oldVisitors"'>
            and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) &lt; 1
          </if>
          <if test='isNewOrOld == "newVisitors"'>
            and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) = 1
          </if>
        </if>
        <if test="channelId != null">
          and channel_id = #{channelId}
        </if>
        <if test="startDate != null">
          and create_date &gt;= #{startDate}
        </if>
        <if test="endDate != null">
          and create_date &lt;= #{endDate}
        </if>
      </where>
      group by times;
    </if>
    <if test='type == "days"'>
      select DATE_FORMAT(create_date,'%Y-%m-%d') times, sum(money) as sumMoney FROM user_money_record
      <where>
        <if test="source != null">
          source = #{source}
        </if>
        <if test="isNewOrOld != null">
          <if test = 'isNewOrOld == "oldVisitors"'>
            and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) &lt; 1
          </if>
          <if test='isNewOrOld == "newVisitors"'>
            and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) = 1
          </if>
        </if>
        <if test="channelId != null">
          and channel_id = #{channelId}
        </if>
        <if test="startDate != null">
          and create_date &gt;= #{startDate}
        </if>
        <if test="endDate != null">
          and create_date &lt;= #{endDate}
        </if>
      </where>
      group by times;
    </if>
    <if test='type == "hours"'>
      select DATE_FORMAT(create_date,'%Y-%m-%d:%H') times, sum(money) as sumMoney FROM user_money_record
      <where>
        <if test="source != null">
          source = #{source}
        </if>
        <if test="isNewOrOld != null">
          <if test = 'isNewOrOld == "oldVisitors"'>
            and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) &lt; 1
          </if>
          <if test='isNewOrOld == "newVisitors"'>
            and DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) = 1
          </if>
        </if>
        <if test="channelId != null">
          and channel_id = #{channelId}
        </if>
        <if test="startDate != null">
          and create_date &gt;= #{startDate}
        </if>
        <if test="endDate != null">
          and create_date &lt;= #{endDate}
        </if>
      </where>
      group by times;
    </if>
  </select>

  <select id="listMoneyCountBySource" parameterType="map" resultMap="BaseResultMap">
    select sum(money) as sumMoney,source from user_money_record where source not in (2,4)
    <if test='type == "today"'>
      and DateDiff(now(),create_date)=0
    </if>
    <if test='type == "yesterday"'>
      and DateDiff(now(),create_date) = 1
    </if>
    <if test='type == "sevenDays"'>
      and DateDiff(now(),create_date) &lt;=7
    </if>
    <if test='type == "thirtyDays"'>
      and DateDiff(now(),create_date) &lt;=30
    </if>
    <if test="startDate != null">
      and create_date &gt;= #{startDate}
    </if>
    <if test="endDate != null">
      and create_date &lt;= #{endDate}
    </if>
    <if test="isNewOrOld != null">
      <if test = 'isNewOrOld == "oldVisitors"'>
        and  user_money_record.userId in (select userId from user where DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) &lt; 1)
      </if>
      <if test='isNewOrOld == "newVisitors"'>
        and user_money_record.userId in (select userId from user where DATEDIFF(DATE_SUB(create_date,INTERVAL -1 DAY), NOW() ) = 1)
      </if>
    </if>
    GROUP BY source
  </select>

  <select id="weekRankings" resultType="com.zhishun.zaotoutiao.core.model.vo.AllRankingVO">
    SELECT user_money_record.userId, sum(user_money_record.money) as sumMoney
    FROM user_money_record
    WHERE user_money_record.type = 1 and DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= user_money_record.create_date
    GROUP BY user_money_record.userId
    ORDER BY sum(user_money_record.money) DESC LIMIT 0,100
  </select>
</mapper>