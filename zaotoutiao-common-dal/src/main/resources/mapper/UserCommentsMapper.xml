<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhishun.zaotoutiao.dal.mapper.UserCommentsMapper">
  <resultMap id="BaseResultMap" type="com.zhishun.zaotoutiao.core.model.vo.UserCommentsVO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="info_id" jdbcType="VARCHAR" property="infoId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="likes" jdbcType="INTEGER" property="likes" />
  </resultMap>
  <sql id="Base_Column_List">
    id, info_id, user_id, content, create_date, likes
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_comments
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user_comments
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.zhishun.zaotoutiao.core.model.entity.UserComments">
    insert into user_comments (id, info_id, user_id,
      content, create_date, likes
      )
    values (#{id,jdbcType=BIGINT}, #{infoId,jdbcType=VARCHAR}, #{userId,jdbcType=BIGINT},
      #{content,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, #{likes,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zhishun.zaotoutiao.core.model.entity.UserComments">
    insert into user_comments
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="infoId != null">
        info_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="likes != null">
        likes,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="infoId != null">
        #{infoId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="likes != null">
        #{likes,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zhishun.zaotoutiao.core.model.entity.UserComments">
    update user_comments
    <set>
      <if test="infoId != null">
        info_id = #{infoId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="likes != null">
        likes = #{likes,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zhishun.zaotoutiao.core.model.entity.UserComments">
    update user_comments
    set info_id = #{infoId,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=BIGINT},
      content = #{content,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      likes = #{likes,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="getUserCommnetsInfo" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from user_comments
    where id = #{id,jdbcType=BIGINT}
    <if test="userId != null">
      and user_id = #{userId}
    </if>
  </select>

  <delete id="delUserComments" parameterType="map">
    delete from user_comments
    where user_id = #{userId}
    <if test="info_id != null">
      and info_id = #{infoId}
    </if>
  </delete>

  <select id="getUserCommentsByInfoId" parameterType="string" resultMap="BaseResultMap">
    select * from user_comments WHERE info_id = #{infoId}
  </select>

  <select id="countUserComments" parameterType="string" resultType="int">
    select count(*) as comments_num from user_comments WHERE info_id = #{infoId}
  </select>

  <select id="getCommentsNumByInfoId" parameterType="java.lang.String" resultType="int">
    select count(0) FROM user_comments
    WHERE info_id = #{infoId}
  </select>

  <select id="getCommentsList" resultMap="BaseResultMap">
    SELECT user_comments.*,infos.title,infos.infoId,user.nickName,user.userId
    FROM user_comments
    LEFT JOIN infos ON infos.info_id = user_comments.info_id
    LEFT JOIN user ON user.userId = user_comments.user_id
  </select>

  <select id="getCommentsByKeywordList" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT user_comments.*,infos.title,infos.infoId,user.nickName,user.userId
    FROM user_comments
    LEFT JOIN infos ON infos.infoId = user_comments.info_id
    LEFT JOIN user ON user.userId = user_comments.info_id
    WHERE user.nickName like #{keyword} or infos.title like #{keyword} or user_comments.content like #{keyword}
  </select>

  <select id="getNewComments" parameterType="map" resultMap="BaseResultMap">
    SELECT user.headpath, user.nickName, user_comments.*
    FROM user, user_comments
    WHERE user_comments.info_id = #{infoId}
    AND user.userId = user_comments.user_id
    ORDER BY user_comments.create_date desc limit #{startNo},#{endNo}
  </select>

  <select id="getHotComments" parameterType="map" resultMap="BaseResultMap">
    SELECT user.headpath, user.nickName, user_comments.*
    FROM user, user_comments
    WHERE user_comments.info_id = #{infoId}
    AND user.userId = user_comments.user_id
    ORDER BY user_comments.likes desc,user_comments.create_date desc limit #{startNo},#{endNo}
  </select>
</mapper>